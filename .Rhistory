###Ad-hoc testing
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
####End
n <- 27000
M<-10000
correct_res <- 0
add_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
}
###Ad-hoc testing
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
####End
1/8
j <- 1127
pi.prob <- Results$pi.prob[j]
OR <- Results$OR[j]
pheno_prob <- Results$pheno_prob[j]
pwr <- Results$pwr[j]
pheno.odds <- pheno_prob/(1-pheno_prob)
pheno_prob0 <- 1/(OR/pheno.odds+1)
w <- c((1-pi.prob)^2,2*pi.prob*(1-pi.prob),pi.prob^2)
##n will be set by the genodds power calculation
n<-genodds.power(c(pheno_prob0,1-pheno_prob0),c(pheno_prob,1-pheno_prob),power=pwr,alpha=5*10^(-8),w=c(w[1],w[2]+w[3]))
n
get_n(5*10^(-8),.2,pheno_prob0*w[1],(1-pheno_prob0)*w[1],pheno_prob*(w[2]+w[3]),(1-pheno_prob)*(w[2]+w[3]),OR)
get_n(2.5*10^(-8),.2,pheno_prob0*w[1],(1-pheno_prob0)*w[1],pheno_prob*(w[2]+w[3]),(1-pheno_prob)*(w[2]+w[3]),OR)
n <- 13000
M<-10000
correct_res <- 0
add_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
}
###Ad-hoc testing
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
####End
qchisq(.95,1)
qchisq(1-5*10^(-8),1)
pnorm(80,71,7)
`-pnorm(80,71,7)
1-pnorm(80,71,7)
)
``
`
1-pnorm(80,71,7)
1-pnorm(80,71,7/10)
1-pnorm(80,75,7/10)
1-pnorm(80,71,7/6)
1-pnorm(73,71,7/6)
pnorm(73,71,7/6)
1-pnorm(73,71,7/)
1-pnorm(73,71,7)
j <- 1
n <- 817353
M<-10000
correct_res <- 0
add_res <- 0
rec_res <- 0
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
M<-10000
correct_res <- 0
add_res <- 0
rec_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
sum(rec_res)/M ##power3
j
n
OR <- c(1.1,1.25,1.5,1.75,2,2.5,3)
pheno_prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9) ##Probability of having the phenotype GIVEN you have the right allele freq
pi.prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9)
Results <- expand.grid(OR=OR,pheno_prob=pheno_prob,pi.prob=pi.prob,pwr=c(0.5,0.8,0.9,0.99))
Results$n <- 0
Results$power1 <- 0
Results$power2 <- 0
Results$power3 <- 0
Results$skipstatus_i <- 0
Results$skipstatus_j <- 0
pi.prob <- Results$pi.prob[j]
OR <- Results$OR[j]
pheno_prob <- Results$pheno_prob[j]
pwr <- Results$pwr[j]
pheno.odds <- pheno_prob/(1-pheno_prob)
pheno_prob0 <- 1/(OR/pheno.odds+1)
w <- c((1-pi.prob)^2,2*pi.prob*(1-pi.prob),pi.prob^2)
##n will be set by the genodds power calculation
M<-10000
correct_res <- 0
add_res <- 0
rec_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
sum(rec_res)/M ##power3
j <- 278
j
n <- 2141
pi.prob <- Results$pi.prob[j]
OR <- Results$OR[j]
pheno_prob <- Results$pheno_prob[j]
pwr <- Results$pwr[j]
pheno.odds <- pheno_prob/(1-pheno_prob)
pheno_prob0 <- 1/(OR/pheno.odds+1)
w <- c((1-pi.prob)^2,2*pi.prob*(1-pi.prob),pi.prob^2)
##n will be set by the genodds power calculation
M<-10000
correct_res <- 0
add_res <- 0
rec_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
sum(correct_res)/M ##power1
sum(add_res)/M ##power2
sum(rec_res)/M ##power3
OR <- c(1.1,1.25,1.5,1.75,2,2.5,3)
pheno_prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9) ##Probability of having the phenotype GIVEN you have the right allele freq
pi.prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9)
Results <- expand.grid(OR=OR,pheno_prob=pheno_prob,pi.prob=pi.prob,pwr=c(0.5,0.8,0.9,0.99))
Results$n <- 0
Results$power1 <- 0
Results$power2 <- 0
Results$power3 <- 0
Results$skipstatus_i <- 0
Results$skipstatus_j <- 0
###This is naive but for now assume that pi=.5 where p(0) = (1-pi)^2, p(1)=2pi(1-pi), p(2)=pi^2
##ALTERNATIVELY
##Calculate sample size for a certain power
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.5,alpha=2.5*10^(-8),w=c(.25,.75)) ##1423
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.8,alpha=2.5*10^(-8),w=c(.25,.75)) ##1899
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.9,alpha=2.5*10^(-8),w=c(.25,.75)) ##n=2175
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.99,alpha=2.5*10^(-8),w=c(.25,.75)) ##n=2906
##Start loop
for (j in 1:nrow(Results)){
##COMMENT OUT WHEN LOOP IS BUILT
pi.prob <- Results$pi.prob[j]
OR <- Results$OR[j]
pheno_prob <- Results$pheno_prob[j]
pwr <- Results$pwr[j]
pheno.odds <- pheno_prob/(1-pheno_prob)
pheno_prob0 <- 1/(OR/pheno.odds+1)
w <- c((1-pi.prob)^2,2*pi.prob*(1-pi.prob),pi.prob^2)
##n will be set by the genodds power calculation
n<-genodds.power(c(pheno_prob0,1-pheno_prob0),c(pheno_prob,1-pheno_prob),power=pwr,alpha=5*10^(-8),w=c(w[1],w[2]+w[3]))
if(n>10000000){Results$skipstatus_j[j] <- 1
next}
##Start with a single scenario
M<-1000
correct_res <- 0
add_res <- 0
rec_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
Results$n[j] <- n
Results$power1[j] <- sum(correct_res)/M ##power1
Results$power2[j] <- sum(add_res)/M ##power2
Results$power3[j] <- sum(rec_res)/M ##power3
if(j%%50==0){print(j/M)}
#if(Results$skipstatus[j]==1){print(paste0("OOPSIE TOODLES",j))}
}
OR <- c(1.1,1.25,1.5,1.75,2,2.5,3)
pheno_prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9) ##Probability of having the phenotype GIVEN you have the right allele freq
pi.prob <- c(.05,.1,.2,.3,.4,.5,.6,.7,.8,.9)
Results <- expand.grid(OR=OR,pheno_prob=pheno_prob,pi.prob=pi.prob,pwr=c(0.5,0.8,0.9,0.99))
Results$n <- 0
Results$power1 <- 0
Results$power2 <- 0
Results$power3 <- 0
Results$skipstatus_i <- 0
Results$skipstatus_j <- 0
###This is naive but for now assume that pi=.5 where p(0) = (1-pi)^2, p(1)=2pi(1-pi), p(2)=pi^2
##ALTERNATIVELY
##Calculate sample size for a certain power
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.5,alpha=2.5*10^(-8),w=c(.25,.75)) ##1423
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.8,alpha=2.5*10^(-8),w=c(.25,.75)) ##1899
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.9,alpha=2.5*10^(-8),w=c(.25,.75)) ##n=2175
# genodds.power(c(.5,.5),c(.3333,.6667),power=0.99,alpha=2.5*10^(-8),w=c(.25,.75)) ##n=2906
##Start loop
for (j in 1:nrow(Results)){
##COMMENT OUT WHEN LOOP IS BUILT
pi.prob <- Results$pi.prob[j]
OR <- Results$OR[j]
pheno_prob <- Results$pheno_prob[j]
pwr <- Results$pwr[j]
pheno.odds <- pheno_prob/(1-pheno_prob)
pheno_prob0 <- 1/(OR/pheno.odds+1)
w <- c((1-pi.prob)^2,2*pi.prob*(1-pi.prob),pi.prob^2)
##n will be set by the genodds power calculation
n<-genodds.power(c(pheno_prob0,1-pheno_prob0),c(pheno_prob,1-pheno_prob),power=pwr,alpha=5*10^(-8),w=c(w[1],w[2]+w[3]))
if(n>10000000){Results$skipstatus_j[j] <- 1
next}
##Start with a single scenario
M<-1000
correct_res <- 0
add_res <- 0
rec_res <- 0
#Res <- data.frame(i=seq(M),correct_res=0,correct_TS=0, add_res=0, add_TS=0)
########################
for(i in 1:M){
X <- rmultinom(1,n,w)
n11 <- rbinom(1,X[2,],pheno_prob)
n12 <- X[2,] - n11
n21 <- rbinom(1,X[3,],pheno_prob)
n22 <- X[3,] - n21
n01 <- rbinom(1,X[1,],pheno_prob0)
n02 <- X[1,] - n01
if(min(n11,n12,n21,n22,n01,n02)==0){Results$skipstatus_i[j]<-1
next}
##Do test using correct assumption:
log_OR_actual <- log(n11+n21) + log(n02) - log(n12+n22) -log(n01)
sd_logodds <- sqrt(1/(n11+n21) + 1/(n12+n22) + 1/n02 + 1/n01)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){correct_res<-correct_res+1}
##Do test with additive model
df <- data.frame(X=c(0,1,2),Y0=c(n01, n11, n21), Y1=c(n02,n12, n22))
mod <- glm(cbind(Y1, Y0) ~ X, family = binomial, data = df)
tst<-summary(mod)
if(abs(tst$coefficients[2,1]/tst$coefficients[2,2])>threshold){add_res<-add_res+1}
#if(i%%50==0){print(i)}
##Do test using recessive model:
log_OR_actual <- log(n01+n11) + log(n22) - log(n02+n12) -log(n21)
sd_logodds <- sqrt(1/(n01+n11) + 1/(n02+n12) + 1/n22 + 1/n21)
#log_OR_actual/sd_logodds
#Res$correct_TS[i] <- log_OR_actual/sd_logodds
if(abs(log_OR_actual/sd_logodds)>threshold){rec_res<-rec_res+1}
}
Results$n[j] <- n
Results$power1[j] <- sum(correct_res)/M ##power1
Results$power2[j] <- sum(add_res)/M ##power2
Results$power3[j] <- sum(rec_res)/M ##power3
if(j%%50==0){print(j/nrow(Results))}
#if(Results$skipstatus[j]==1){print(paste0("OOPSIE TOODLES",j))}
}
setwd("C:\\Users\\Jackson_Barth\\Box\\Research\\Genomics Core\\Genetics Problem")
write.csv(Results,"type2_sim_rec.csv")
log10(2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
version()
library(ExperimentHub)
.libPaths()
library(ExperimentHub)
eh <- ExperimentHub()
BiocManager::install(version = "3.19")
BiocManager::install(version = "3.19")
eh <- ExperimentHub()
query(eh, "EpipwR.data/")
ab_sets <- eh[["EH9499"]]
ab_sets <- eh[["EH9499"]]
ab_sets <- eh[["EH9499"]]
?bfcadd
library(devtools)
install_github("jbarth216/EpipwR.data")
library(EpipwR.data)
ab_sets <- eh[["EH9499"]]
ab_sets <- eh[["EH3068"]]
dim(ab_sets)
ab_sets <- eh[["EH9499"]]
ab_sets <- eh[["EH9500"]]
ab_sets <- eh[["EH9498"]]
httr::get("https://experimenthub.bioconductor.org/fetch/9566")
httr::GET("https://experimenthub.bioconductor.org/fetch/9566")
httr::GET("https://experimenthub.bioconductor.org/fetch/166")
httr::GET("https://experimenthub.bioconductor.org/fetch/9499")
httr::GET("https://experimenthub.bioconductor.org/fetch/9565")
httr::GET("https://experimenthub.bioconductor.org/fetch/9567")
httr::GET("https://experimenthub.bioconductor.org/fetch/3068")
httr::GET("https://experimenthub.bioconductor.org/fetch/3010")
query(eh,"Epipwr.data")
ab_sets <- eh[["EH9499"]]
httr::GET("https://experimenthub.bioconductor.org/fetch/9565")
httr::GET("https://experimenthub.bioconductor.org/fetch/9566")
httr::GET("https://experimenthub.bioconductor.org/fetch/9567")
httr::GET("https://experimenthub.bioconductor.org/fetch/9568")
httr::GET("https://experimenthub.bioconductor.org/fetch/9569")
httr::GET("https://experimenthub.bioconductor.org/fetch/9570")
httr::GET("https://experimenthub.bioconductor.org/fetch/9571")
httr::GET("https://experimenthub.bioconductor.org/fetch/9572")
httr::GET("https://experimenthub.bioconductor.org/fetch/9573")
httr::GET("https://experimenthub.bioconductor.org/fetch/9574")
httr::GET("https://experimenthub.bioconductor.org/fetch/9575")
httr::GET("https://experimenthub.bioconductor.org/fetch/9576")
httr::GET("https://experimenthub.bioconductor.org/fetch/9577")
df = data.frame("Title" = NA,
"Description" = NA,
"BiocVersion" = NA,
"Genome" = NA,
"SourceType" = NA,
"SourceUrl" = NA,
"SourceVersion" = NA,
"Species" = NA,
"TaxonomyId" = NA,
"Coordinate_1_based" = NA,
"DataProvider" = NA,
"Maintainer" = NA,
"RDataClass" = NA,
"DispatchClass" = NA,
"RDataPath" = NA,
"Tags" = NA)
df[1:12,] = matrix(c("Saliva", "Lymphoma", "Placenta", "Liver", "Colon", "Blood (Adults) - Peripheral Leukocytes", "Blood 5 year olds", "Blood newborns", "Cord-blood (whole blood)", "Cord-blood (PBMC)", "Adult (PBMC)", "Sperm",
paste("CpG-specific beta distribution parameter estimates for EWAS of ", c("Saliva", "Lymphoma", "Placenta", "Liver", "Colon", "Blood (Adults) - Peripheral Leukocytes", "Blood 5 year olds", "Blood newborns", "Cord-blood (whole blood)", "Cord-blood (PBMC)", "Adult (PBMC)", "Sperm"), " tissues", sep = ""),
rep("3.20", 12),
rep(NA,12),
rep("TXT",12),
paste("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=", c("GSE92767", "GSE42372", "GSE62733", "GSE61258", "GSE77718", "GSE42861", "GSE83334", "GSE82273", "GSE69176", "GSE110128", "GSE67170", "GSE114753"), sep = ""),
rep(NA,12), # rep(format(Sys.time(), "%b %d %Y"),12),
rep("Homo sapiens",12),
rep(9606,12),
rep(NA,12),
rep("GEO",12),
rep("Jackson Barth <Jackson_Barth@Baylor.edu>",12),
rep("matrix",12),
rep("Rda",12),
paste("EpipwR.data/", c("d1_ab.rdata", "d2_ab.rdata", "d3_ab.rdata", "d4_ab.rdata", "d5_ab.rdata", "d6_ab.rdata", "d7_ab.rdata", "d8_ab.rdata", "d9_ab.rdata", "d10_ab.rdata", "d11_ab.rdata", "d12_ab.rdata"), sep = "")),
nrow = 12, ncol = 16, byrow = FALSE
)
write.csv(df, file = "/inst/extdata/metadata.csv", row.names=FALSE)
