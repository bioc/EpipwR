stop("Tissue type not found")
)
if(Tissue == "Blood newborns"){dat <- dat[dat[,2]>0,]}
return(dat)
}
how_many_null_pvals <- function(dm, Total, sig){
l <- 1
while(l < dm){
if(pbeta((dm+l)*sig/Total,l,Total-dm-l+1)<(1*10^-(10))){
break
} else{l <- l + 1}
}
###The minimum number of potential false positives to consider is 5 (unless there are less than 5 non-associated tests)
l <- min(max(l,5),Total-dm)
}
generate_non_null_pvals <- function(n, dm, par, ic, test){
###Start by generating correlated normal samples
Y <- rnorm(n)
X <- rnorm(n*dm)
X1 <- X*sqrt(1-ic^2) + Y*ic
##convert X1 to the selected beta distribution using percentiles
ds <- qbeta(pnorm(X1),rep(par[,1],rep(n,dm)),rep(par[,2],rep(n,dm)))
df <- data.frame(M = log(ds/(1-ds)),cpg = rep(1:dm,rep(n,dm)))
if(test=="pearson"){
##calculate correlations
r<-as.vector(tapply(df$M,df$cpg,cor,y=Y))
##calculate p-values
2*(1-pt(abs(r/sqrt((1-r^2)/(n-2))),n-2))
} else {
as.vector(tapply(df$M,INDEX=df$cpg,get_cor_pval,Y=Y,np_method=test))
}
}
find_BH_cutoff <- function(p,sig,dm,Total,l){
##Generate smallest "l" p-values from true null tests
if(l==Total-dm){nsp <- runif(Total-dm)} else{
nsp <- generate_null_pvals(Total-dm,l) }
##Group all p-values together
all <- c(p,nsp)
all <- all[order(all)]
##Determine the BH cutoff
cutoffs <- sig*(seq(length(all))/Total)
max(c(sig/Total,cutoffs[all < cutoffs]),na.rm=T)
}
generate_non_null_pvals_cc <- function(dm, n1, n2, par, par2, test){
###Generate data
n <- n1 + n2
M1 <- logit(rbeta(dm*n1,par[,1],par[,2]))
M2 <- logit(rbeta(dm*n2,par2[,1],par2[,2]))
cpg1 <- rep(1:dm,n1)
cpg2 <- rep(1:dm,n2)
##calculate test statistic (pooled variance and WS)
s1 <- tapply(M1,cpg1,var)
s2 <- tapply(M2,cpg2,var)
if(test=="pooled"){
TS<-(tapply(M1,cpg1,mean) - tapply(M2,cpg2,mean))/sqrt((s1*(n1-1) + s2*(n2-1))/(n*(n-2)))
2*pt(-1*abs(TS), n-2)
} else if (test=="WS"){
TS<-(tapply(M1,cpg1,mean) - tapply(M2,cpg2,mean))/sqrt(s1/n1 + s2/n2)
df <- ((s1/n1 + s2/n2)^2)/((s1^2)/((n1-1)*n1^2) + (s2^2)/((n2-1)*n2^2))
2*pt(-1*abs(TS),df)
}
}
logit <- function(x){
log(x/(1-x))
}
get_ab <- Vectorize(function(mu, var){
a <- mu^2*(1-mu)/var - mu
b <- a*(1-mu)/mu
c(a,b)
}, vectorize.args = c("mu","var"))
get_power_findN <- function(dm, Total, n, sig, rho_mu, rho_sd=0, ab_sets, Nmax=1000, MOE=.01, Nmin=20, test="pearson", use_fdr=T){
#Start by generating the maximum number of parameters needed
N <- Nmax
ab<-sample(1:dim(ab_sets)[1],dm*N,T)
par1 <- ab_sets[ab,]
##Find a very conservative number of false-positive p-values for FDR correction
l <- how_many_null_pvals(dm, Total, sig)
##Set Upper/Lower bounds if rho_sd is not 0
if(rho_sd==0){ic<-rho_mu} else if(rho_mu>0){lb<-.03
ub <- 1} else{lb <- -1
ub <- -.03}
Collect <- data.frame(power=numeric(N),cutoff=0)
##Begin loop: for each dataset, generate data and calculate power
for(i in 1:N){
##If correlation isn't fixed, generate rho ("ic")
if(rho_sd>0){
ic <- rtnorm(n,rho_mu,rho_sd,lb,ub)
}
###Generate data and p-values for non-null tests
rng <- ((i-1)*dm+1):(i*dm)
par <- matrix(par1[rng,],length(rng),2)
p <- generate_non_null_pvals(n, dm, par, ic, test)
if(use_fdr==TRUE){
cutoff <- find_BH_cutoff(p, sig, dm, Total, l) } else{
cutoff <- sig/Total
}
##Calculate power and store the cutoff
Collect[i,1] <- length(p[p<cutoff])/dm
Collect[i,2] <- cutoff
##breaks the loop if N is above 20 and if the 95% CI for power has a small enough MOE
if(i>=Nmin && sd(Collect$power[1:i])<(sqrt(i)*MOE/1.96)){break}
}
Collect[Collect$cutoff>0,]
}
get_power_cc_findN <- function(dm, Total, n, sig, delta_mu, delta_sd=0, ab_sets,
test="pooled", n1_prop=0.5, Nmax=1000, MOE=.01, Nmin=20, use_fdr=T){
#Start by generating the maximum number of parameters needed
N <- Nmax
ab<-sample(1:dim(ab_sets)[1],dm*N,T)
par1 <- ab_sets[ab,]
##Find a very conservative number of false-positive p-values required
l <- how_many_null_pvals(dm, Total, sig)
Collect <- data.frame(power=numeric(N),cutoff=0)
##Begin loop: for each dataset, generate data and calculate power
for(i in 1:N){
####Establish sample sizes
n1 <- round(n*n1_prop)
n2 <- n-n1
###Generate data and p-values for non-null tests
rng <- ((i-1)*dm+1):(i*dm)
par <- matrix(par1[rng,],length(rng),2)
mu <- par[,1]/(par[,1] + par[,2])
var <- mu*(1-mu)/(par[,1] + par[,2] + 1)
##FOR NOW: FINISH ONLY FOR DELTA_SD > 0
if(delta_sd>0){
lb <- ifelse(del_mu>0,0,-0.5)
ub <- ifelse(del_mu>0,0.5,0)
del <- rtnorm(dm,delta_mu*ifelse(delta_mu > lb & delta_mu<ub,1,-1),delta_sd,lb,ub)
} else{ del <- delta_mu}
mu_new <- ifelse(mu+del<1 & mu+del>0,mu+del,mu-del)
par2 <- matrix(0,length(rng),2)
par2[,1] <- mu_new*apply(par,1,sum)
par2[,2] <- apply(par,1,sum) - par2[,1]
p <- generate_non_null_pvals_cc(dm, n1, n2, par, par2, test)
if(use_fdr==TRUE){
cutoff <- find_BH_cutoff(p, sig, dm, Total, l) } else{
cutoff <- sig/Total
}
##Calculate power and store the cutoff
Collect[i,1] <- length(p[p<cutoff])/dm
Collect[i,2] <- cutoff
##breaks the loop if N is above 20 and if the 95% CI for power has a small enough MOE
if(i>=Nmin && sd(Collect$power[1:i])<(sqrt(i)*MOE/1.96)){break}
}
Collect[Collect$cutoff>0,]
}
get_power_cc <- function(dm, Total, n, fdr_fwer, delta_mu, delta_sd=0, n1_prop=0.5, Tissue="Saliva", Nmax=1000, MOE=.03, test="pooled", use_fdr=TRUE,
Suppress_updates=FALSE){
n1 <- round(n*n1_prop)
n2 <- n - n1
tiss <- c("Saliva",
"Lymphoma",
"Placenta",
"Liver",
"Colon",
"Blood adult",
"Blood 5 year olds",
"Blood newborns",
"Cord-blood (whole blood)",
"Cord-blood (PBMC)",
"Adult (PBMC)",
"Sperm")
if(!is.numeric(dm) || length(dm)>1 || dm < 1 || floor(dm)!= dm){stop(
"The number of significant associations (dm) must be a single positive integer"
)}
if(!is.numeric(Total) || length(Total)>1 || Total < 1 || floor(Total)!= Total){stop(
"The total number of CpG sites (Total) must be a single positive integer"
)}
#if(!is.numeric(n1_prop) || length(n1_prop)>1 || n1_prop >= 1 || n1_prop <= 0){stop(
#  "The proportion of group 1 (n1_prop) must be a single value between 0 and 1"
#)}
for(i in 1:length(n)){
if(!is.numeric(n[i]) || n[i] < 4 || floor(n[i])!= n[i]){stop(
"All sample sizes (n) must be positive integers greater than 3"
)} else if(n1[i] < 2 || n2[i] < 2){stop(
"All sample sizes (n) must be large enough so that each group has at least 2 subjects"
)}
}
if(dm > Total){stop(
"dm must be less than or equal to N"
)}
if(!is.numeric(fdr_fwer) || length(fdr_fwer)>1 || fdr_fwer <= 0 || fdr_fwer >= 1){stop(
"fdr_fwer must be a single number in (0,1)"
)}
for (i in 1:length(delta_mu)){
if(!is.numeric(delta_mu[i]) || abs(delta_mu[i]) > 1 || abs(delta_mu[i]) <= 0){stop(
"All correlations (rho_mu) must have absolute value in (0,1]"
)}
if(delta_mu[i] < .001 && delta_mu[i]>-.01){warning(
"|delta_mu| < .001 will be extremely difficult to detect"
)}
}
if(!is.numeric(delta_sd) || length(delta_sd)>1 || delta_sd<0){stop(
"delta_sd must be a single non-negative number"
)}
if(!(Tissue %in% tiss)){stop(
"Unknown Tissue selected. Valid options are Saliva, Lymphoma, Placenta,
Liver, Colon, Blood adult, Blood 5 year olds, Blood newborns,
Cord-blood (whole blood), Cord-blood (PBMC), Adult (PBMC), Sperm"
)}
if(!is.numeric(Nmax) || length(Nmax)>1 || Nmax<20 || floor(Nmax)!=Nmax){stop(
"Nmax must be a positive integer greater than or equal to 20")}
if(!is.numeric(MOE) || length(MOE) > 1 || MOE<0 || MOE>1){stop(
"MOE must be a single number in [0,1]"
)}
if(!(test %in% c("pooled","WS"))){stop(
"Invalid test selected. Valid options are 'pooled' or 'WS' (Welch-Satterthwaite)"
)}
if(!identical(use_fdr,TRUE) && !identical(use_fdr,FALSE)){stop(
"use_fdr must be boolean (either TRUE or FALSE)"
)}
###Start Power Analysis
n <- sort(n)
delta <- sort(delta_mu)
runs <- length(n)*length(delta)
out <- expand.grid(n, delta)
colnames(out) <- c("n","delta")
out$avg_power <- 0
out$sd_power <- 0
out$N <- 0
##Suppress EH message
suppressMessages(ab_sets <-get_EpipwR_data(Tissue))
for(i in 1:runs){
Results <- get_power_cc_findN(dm, Total, out$n[i], fdr_fwer, out$delta[i], delta_sd, ab_sets, test, n1_prop, Nmax, MOE, Nmin=20, use_fdr)
out$avg_power[i] <- mean(Results$power)
out$sd_power[i] <- sd(Results$power)
out$N[i] <- nrow(Results)
if(Suppress_updates==F){
print(paste0(i," out of ",runs," settings completed"))
}
}
out$se_power <- out$sd_power/sqrt(out$N)
colnames(out)[1:2] <- c("sample_size","delta_mu")
out
}
get_power_cont <- function(dm, Total, n, fdr_fwer, rho_mu, rho_sd=0, Tissue="Saliva", Nmax=1000, MOE=.03, test="pearson", use_fdr=TRUE,
Suppress_updates=FALSE){
tiss <- c("Saliva",
"Lymphoma",
"Placenta",
"Liver",
"Colon",
"Blood adult",
"Blood 5 year olds",
"Blood newborns",
"Cord-blood (whole blood)",
"Cord-blood (PBMC)",
"Adult (PBMC)",
"Sperm")
if(!is.numeric(dm) || length(dm)>1 || dm < 1 || floor(dm)!= dm){stop(
"The number of significant associations (dm) must be a single positive integer"
)}
if(!is.numeric(Total) || length(Total)>1 || Total < 1 || floor(Total)!= Total){stop(
"The total numnber of CpG sites (Total) must be a single positive integer"
)}
for(i in 1:length(n)){
if(!is.numeric(n[i]) || n[i] < 2 || floor(n[i])!= n[i]){stop(
"All sample sizes (n) must be positive integers greater than 1"
)}
}
if(dm > Total){stop(
"dm must be less than or equal to N"
)}
if(!is.numeric(fdr_fwer) || length(fdr_fwer)>1 || fdr_fwer <= 0 || fdr_fwer >= 1){stop(
"fdr_fwer must be a single number in (0,1)"
)}
for (i in 1:length(rho_mu)){
if(!is.numeric(rho_mu[i]) || abs(rho_mu[i]) > 1 || abs(rho_mu[i]) <= 0){stop(
"All correlations (rho_mu) must have absolute value in (0,1]"
)}
if(rho_mu[i] < .05 && rho_mu[i]>-.05){warning(
"|rho_mu| < .05 will be extremely difficult to detect"
)}
}
if(!is.numeric(rho_sd) || length(rho_sd)>1 || rho_sd<0){stop(
"rho_sd must be a single non-negative number"
)}
if(!(Tissue %in% tiss)){stop(
"Unknown Tissue selected. Valid options are Saliva, Lymphoma, Placenta,
Liver, Colon, Blood adult, Blood 5 year olds, Blood newborns,
Cord-blood (whole blood), Cord-blood (PBMC), Adult (PBMC), Sperm"
)}
if(!is.numeric(Nmax) || length(Nmax)>1 || Nmax<20 || floor(Nmax)!=Nmax){stop(
"Nmax must be a positive integer greater than or equal to 20")}
if(!is.numeric(MOE) || length(MOE) > 1 || MOE<0 || MOE>1){stop(
"MOE must be a single number in [0,1]"
)}
if(!(test %in% c("pearson","kendall","spearman"))){stop(
"Invalid test selected. Valid options are 'pearson', 'spearman' or 'kendall'"
)}
if(!identical(use_fdr,TRUE) && !identical(use_fdr,FALSE)){stop(
"use_fdr must be boolean (either TRUE or FALSE)"
)}
###Start Power Analysis
n <- sort(n)
rho <- sort(rho_mu)
runs <- length(n)*length(rho)
out <- expand.grid(n, rho)
colnames(out) <- c("n","rho")
out$avg_power <- 0
out$sd_power <- 0
out$N <- 0
##Suppress EH message
suppressMessages(ab_sets <-get_EpipwR_data(Tissue))
for(i in 1:runs){
Results <- get_power_findN(dm, Total, out$n[i], fdr_fwer, out$rho[i], rho_sd, ab_sets, Nmax, MOE, Nmin=20, test, use_fdr)
out$avg_power[i] <- mean(Results$power)
out$sd_power[i] <- sd(Results$power)
out$N[i] <- nrow(Results)
if(Suppress_updates==F){
print(paste0(i," out of ",runs," settings completed"))
}
}
out$se_power <- out$sd_power/sqrt(out$N)
colnames(out)[1:2] <- c("sample_size","rho_mu")
out
}
EpipwR_plot<-function(df){
if(!is.data.frame(df)){stop("df must be a data frame with EpipwR output")}
df$moe_min <- df$avg_power - 1.96*df$se_power
df$moe_max <- df$avg_power + 1.96*df$se_power
if(colnames(df)[2]=="rho_mu"){
plt <- ggplot2::ggplot(df, ggplot2::aes(x = sample_size, y = avg_power, color = as.character(rho_mu)))
ttl <- ggplot2::labs(title = "Mean power curve(s) with 95% confidence intervals", x = "Sample size", y = "Power",
color=expression(mu[rho]))
} else if(colnames(df)[2]=="delta_mu"){
plt <- ggplot2::ggplot(df, ggplot2::aes(x = sample_size, y = avg_power, color = as.character(delta_mu)))
ttl <- ggplot2::labs(title = "Mean power curve(s) with 95% confidence intervals", x = "Sample size", y = "Power",
color=expression(mu[delta]))
} else{stop("Data Frame is not EpipwR output.")}
plt +
ttl +
ggplot2::geom_line(linewidth = 1.25) +
ggplot2::geom_point(size = 2.5) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = moe_min, ymax = moe_max), linewidth = 1.25) +
ggplot2::geom_hline(yintercept=0.8, linetype="dashed", color = "black") +
ggplot2::geom_hline(yintercept=0.9, linetype="dashed", color = "black") +
ggplot2::ylim(0,1) +
ggplot2::theme(text=ggplot2::element_text(size=18))
}
get_power_cc(100,1000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.002)
get_power_cc_findN <- function(dm, Total, n, sig, delta_mu, delta_sd=0, ab_sets,
test="pooled", n1_prop=0.5, Nmax=1000, MOE=.01, Nmin=20, use_fdr=T){
#Start by generating the maximum number of parameters needed
N <- Nmax
ab<-sample(1:dim(ab_sets)[1],dm*N,T)
par1 <- ab_sets[ab,]
##Find a very conservative number of false-positive p-values required
l <- how_many_null_pvals(dm, Total, sig)
Collect <- data.frame(power=numeric(N),cutoff=0)
##Begin loop: for each dataset, generate data and calculate power
for(i in 1:N){
####Establish sample sizes
n1 <- round(n*n1_prop)
n2 <- n-n1
###Generate data and p-values for non-null tests
rng <- ((i-1)*dm+1):(i*dm)
par <- matrix(par1[rng,],length(rng),2)
mu <- par[,1]/(par[,1] + par[,2])
var <- mu*(1-mu)/(par[,1] + par[,2] + 1)
##FOR NOW: FINISH ONLY FOR DELTA_SD > 0
if(delta_sd>0){
lb <- ifelse(delta_mu>0,0,-0.5)
ub <- ifelse(delta_mu>0,0.5,0)
del <- rtnorm(dm,delta_mu*ifelse(delta_mu > lb & delta_mu<ub,1,-1),delta_sd,lb,ub)
} else{ del <- delta_mu}
mu_new <- ifelse(mu+del<1 & mu+del>0,mu+del,mu-del)
par2 <- matrix(0,length(rng),2)
par2[,1] <- mu_new*apply(par,1,sum)
par2[,2] <- apply(par,1,sum) - par2[,1]
p <- generate_non_null_pvals_cc(dm, n1, n2, par, par2, test)
if(use_fdr==TRUE){
cutoff <- find_BH_cutoff(p, sig, dm, Total, l) } else{
cutoff <- sig/Total
}
##Calculate power and store the cutoff
Collect[i,1] <- length(p[p<cutoff])/dm
Collect[i,2] <- cutoff
##breaks the loop if N is above 20 and if the 95% CI for power has a small enough MOE
if(i>=Nmin && sd(Collect$power[1:i])<(sqrt(i)*MOE/1.96)){break}
}
Collect[Collect$cutoff>0,]
}
get_power_cc(100,1000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.002)
get_power_cc(100,1000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01)
get_power_cc(100,1000000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01)
get_power_cc(100,1000000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01,use_fdr=F)
get_power_cc(100,1000000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01,use_fdr=F,Suppress_updates = T)
get_power_cont(100,100000,c(20,50,100,150),.05,c(.1,.2,.3,.4,.5,-.1,-.2,-.3),.05)
get_power_cont(100,100000,c(20,50,100,150),.05,c(.1,.2,.3,-.1,-.2,-.3),.05,MOE=.005)
get_power_cont(100,100000,c(100,150,200,250),.05,c(.3,.4,.5,-.3,-.4,-.5),.05,MOE=.005,Tissue="Lymphoma")
get_power_cont(100,100000,c(100,150,200,250),.05,c(.3,.4,.5,-.3,-.4,-.5),.05,MOE=.01,Tissue="nuts")
get_power_cont(100,100000,c(100,150,200,250),.05,c(.3,.4,.5,-.3,-.4,-.5),.05,MOE=.01,Tissue="Placenta")
devtools::document()
rm(list = c("EpipwR_plot", "get_power_cont"))
devtools::load_all()
rm(list = c("get_power_cc"))
devtools::load_all()
devtools::document()
?get_power_cc
get_power_cc(100,1000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01,use_fdr=F)
get_power_cc(100,1000,c(10,20,30,40,50,60,70,80,90,100),.05,c(.005,.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="pooled")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T)
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),"pooled")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"pooled")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"pooled")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"pooled")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"pooled")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"WS")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"WS")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"WS")
generate_non_null_pvals_cc(2,10,10,matrix(c(5,10,5,10),2,2),matrix(c(7,8,7,8),2,2),"WS")
100/20
100*(.1+.1)
devtools::load_all()
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="pooled")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T)
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
warnings()
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Lymphoma")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Saliva")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Placenta")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Liver")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Colon")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood adult")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Bl")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood 5 year olds")
get_power_cc(100,1000,c(50,100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Cord-blood (whole blood")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Cord-blood (whole blood)")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Cord-blood (PBMC)")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Adult (PBMC)")
get_power_cc(100,1000,c(100),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Sperm")
get_power_cont(100,100000,c(20,50,100,150),.05,c(.1,.2,.3,.4,.5,-.1,-.2,-.3),.05,Tissue="Blood newborns")
letssee <- get_EpipwR_data("Blood newborns")
dim(letssee)
letssee[1:10,2]
letssee[1:10,]
apply(letssee,2,min)
length(c(1==1,2==2,3==4))
c(1==1,2==2,3==4)
length(letssee)
length(letssee)/2
length(letssee[letssee[,1]>0])/2
length(letssee[letssee[,1]<0])/2
devtools::load_all()
get_power_cc(100,1000,c(100,200,300,400),.05,c(.01,.015,.02),.001,MOE=.01,use_fdr=F,test="WS",Suppress_updates = T,Tissue = "Blood newborns")
k <- get_EpipwR_data("Lymphoma")
dim(k)
length(k[k[,1]<0]/2)
length(k[k[,2]<0]/2)
k[1:20,]
?get_power_cont
devtools::document()
?get_power_cont
?EpipwR_plot
devtools::build_rmd("vignettes/EpipwR.rmd")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
tex2markdown <- function(texstring) {
writeLines(text = texstring,
con = myfile <- tempfile(fileext = ".tex"))
texfile <- pandoc(input = myfile, format = "html")
cat(readLines(texfile), sep = "\n")
unlink(c(myfile, texfile))
}
textable <- "
\begin{table}[h]
\begin{tabular}{lll}
\hline
library(knitr)
tex2markdown <- function(texstring) {
writeLines(text = texstring,
con = myfile <- tempfile(fileext = ".tex"))
texfile <- pandoc(input = myfile, format = "html")
cat(readLines(texfile), sep = "\n")
unlink(c(myfile, texfile))
}
textable <- "
\begin{table}[h]
\begin{tabular}{lll}
Tissue Type              & Accession Number & Reference                                 \\\hline\hline
library(knitr)
tex2markdown <- function(texstring) {
writeLines(text = texstring,
con = myfile <- tempfile(fileext = ".tex"))
texfile <- pandoc(input = myfile, format = "html")
cat(readLines(texfile), sep = "\n")
unlink(c(myfile, texfile))
}
textable <- "
\\begin{table}[h]
\\begin{tabular}{lll}
\\hline
Tissue Type              & Accession Number & Reference                                 \\\hline\hline
pbinom(8,10,.5)
1-pbinom(7,10,.5)
setwd("~/Shiny Testing")
library(shiny); runApp('shiny_app.R')
oad("absets.rdata")
load("absets.rdata")
runApp('shiny_app.R')
install.packages("sessioninfo")
install.packages("sessioninfo")
# Load sessioninfo package
library(sessioninfo)
# Display session information
session_info()
